
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000027e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000126c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f47  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000024a7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024b8  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000024f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00002aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000308e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  78:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <mcp2515_set_mode>:
#include <include/mcp2515.h>
#include <include/spi.h>

void mcp2515_set_mode(uint8_t mode) {
  80:	cf 93       	push	r28
  82:	c8 2f       	mov	r28, r24
    SPI_unset_cs();
  84:	0e 94 33 01 	call	0x266	; 0x266 <SPI_unset_cs>
    SPI_send(BIT_MODIFY);
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(CANCTRL);
  8e:	8f e0       	ldi	r24, 0x0F	; 15
  90:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(REQOP_MASK);
  94:	80 ee       	ldi	r24, 0xE0	; 224
  96:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send((mode << REQOP_OFFSET));
  9a:	8c 2f       	mov	r24, r28
  9c:	82 95       	swap	r24
  9e:	88 0f       	add	r24, r24
  a0:	80 7e       	andi	r24, 0xE0	; 224
  a2:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_set_cs();    
}
  a6:	cf 91       	pop	r28
    SPI_unset_cs();
    SPI_send(BIT_MODIFY);
    SPI_send(CANCTRL);
    SPI_send(REQOP_MASK);
    SPI_send((mode << REQOP_OFFSET));
    SPI_set_cs();    
  a8:	0c 94 35 01 	jmp	0x26a	; 0x26a <SPI_set_cs>

000000ac <mcp2515_enable_clkout>:
}

void mcp2515_enable_clkout() {
    SPI_unset_cs();
  ac:	0e 94 33 01 	call	0x266	; 0x266 <SPI_unset_cs>
    SPI_send(BIT_MODIFY);
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(CANCTRL);
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(CLKEN);
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(CLKEN);
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_set_cs();
  c8:	0c 94 35 01 	jmp	0x26a	; 0x26a <SPI_set_cs>

000000cc <mcp2515_disable_clkout>:
}

void mcp2515_disable_clkout() {
    SPI_unset_cs();
  cc:	0e 94 33 01 	call	0x266	; 0x266 <SPI_unset_cs>
    SPI_send(BIT_MODIFY);
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(CANCTRL);
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(CLKEN);
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(!CLKEN);
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_set_cs();
  e8:	0c 94 35 01 	jmp	0x26a	; 0x26a <SPI_set_cs>

000000ec <mcp2515_set_register>:
}

void mcp2515_set_register(uint8_t reg, uint8_t data) {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	d8 2f       	mov	r29, r24
  f2:	c6 2f       	mov	r28, r22
    SPI_unset_cs();
  f4:	0e 94 33 01 	call	0x266	; 0x266 <SPI_unset_cs>
    SPI_send(WRITE);
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(reg);
  fe:	8d 2f       	mov	r24, r29
 100:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(data);
 104:	8c 2f       	mov	r24, r28
 106:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_set_cs();
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
void mcp2515_set_register(uint8_t reg, uint8_t data) {
    SPI_unset_cs();
    SPI_send(WRITE);
    SPI_send(reg);
    SPI_send(data);
    SPI_set_cs();
 10e:	0c 94 35 01 	jmp	0x26a	; 0x26a <SPI_set_cs>

00000112 <mcp2515_read_register>:
}

uint8_t mcp2515_read_register(uint8_t reg) {
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
    SPI_unset_cs();
 116:	0e 94 33 01 	call	0x266	; 0x266 <SPI_unset_cs>
    SPI_send(READ);
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(reg);
 120:	8c 2f       	mov	r24, r28
 122:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(0x00);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_set_cs();
 12c:	0e 94 35 01 	call	0x26a	; 0x26a <SPI_set_cs>
    return SPDR;
 130:	8e b5       	in	r24, 0x2e	; 46
}
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <mcp2515_load_message>:

void mcp2515_load_message(uint8_t buffer, can_frame_t* frame) {
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	c8 2f       	mov	r28, r24
 144:	7b 01       	movw	r14, r22
    SPI_unset_cs();
 146:	0e 94 33 01 	call	0x266	; 0x266 <SPI_unset_cs>
    SPI_send(LOAD_TX_BUFFER | buffer);
 14a:	8c 2f       	mov	r24, r28
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send((frame->SID >> 3));
 152:	f7 01       	movw	r30, r14
 154:	80 81       	ld	r24, Z
 156:	91 81       	ldd	r25, Z+1	; 0x01
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send((frame->SID << 5));
 168:	f7 01       	movw	r30, r14
 16a:	80 81       	ld	r24, Z
 16c:	82 95       	swap	r24
 16e:	88 0f       	add	r24, r24
 170:	80 7e       	andi	r24, 0xE0	; 224
 172:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(0);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(0);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    
    uint8_t length = frame->header.len & 0x0F;
 182:	f7 01       	movw	r30, r14
 184:	82 81       	ldd	r24, Z+2	; 0x02
 186:	18 2f       	mov	r17, r24
 188:	16 95       	lsr	r17
 18a:	1f 70       	andi	r17, 0x0F	; 15
    if (frame->header.rtr) {
 18c:	80 fd       	sbrc	r24, 0
 18e:	1c c0       	rjmp	.+56     	; 0x1c8 <mcp2515_load_message+0x92>
        SPI_send((1<<RTR) | length);
    }
    else {
      SPI_send(length);       
 190:	81 2f       	mov	r24, r17
 192:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
	  uint8_t i;
      for (i=0; i < length; i++)
 196:	11 23       	and	r17, r17
 198:	79 f0       	breq	.+30     	; 0x1b8 <mcp2515_load_message+0x82>
 19a:	e7 01       	movw	r28, r14
 19c:	23 96       	adiw	r28, 0x03	; 3
 19e:	11 50       	subi	r17, 0x01	; 1
 1a0:	01 2f       	mov	r16, r17
 1a2:	10 e0       	ldi	r17, 0x00	; 0
 1a4:	0c 5f       	subi	r16, 0xFC	; 252
 1a6:	1f 4f       	sbci	r17, 0xFF	; 255
 1a8:	0e 0d       	add	r16, r14
 1aa:	1f 1d       	adc	r17, r15
      {
        SPI_send(frame->data[i]);
 1ac:	89 91       	ld	r24, Y+
 1ae:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
        SPI_send((1<<RTR) | length);
    }
    else {
      SPI_send(length);       
	  uint8_t i;
      for (i=0; i < length; i++)
 1b2:	c0 17       	cp	r28, r16
 1b4:	d1 07       	cpc	r29, r17
 1b6:	d1 f7       	brne	.-12     	; 0x1ac <mcp2515_load_message+0x76>
      }
   }

    SPI_set_cs();

}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
      {
        SPI_send(frame->data[i]);
      }
   }

    SPI_set_cs();
 1c4:	0c 94 35 01 	jmp	0x26a	; 0x26a <SPI_set_cs>
    SPI_send(0);
    SPI_send(0);
    
    uint8_t length = frame->header.len & 0x0F;
    if (frame->header.rtr) {
        SPI_send((1<<RTR) | length);
 1c8:	81 2f       	mov	r24, r17
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
      }
   }

    SPI_set_cs();

}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
      {
        SPI_send(frame->data[i]);
      }
   }

    SPI_set_cs();
 1dc:	0c 94 35 01 	jmp	0x26a	; 0x26a <SPI_set_cs>

000001e0 <mcp2515_request_to_send>:

}

void mcp2515_request_to_send(uint8_t buffer) {
 1e0:	cf 93       	push	r28
    uint8_t address = (buffer == 0) ? 1 : buffer;
 1e2:	88 23       	and	r24, r24
 1e4:	51 f0       	breq	.+20     	; 0x1fa <mcp2515_request_to_send+0x1a>
 1e6:	c8 2f       	mov	r28, r24
 1e8:	c0 68       	ori	r28, 0x80	; 128
    SPI_unset_cs();
 1ea:	0e 94 33 01 	call	0x266	; 0x266 <SPI_unset_cs>
    SPI_send(RTS | address);
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_set_cs();
}
 1f4:	cf 91       	pop	r28

void mcp2515_request_to_send(uint8_t buffer) {
    uint8_t address = (buffer == 0) ? 1 : buffer;
    SPI_unset_cs();
    SPI_send(RTS | address);
    SPI_set_cs();
 1f6:	0c 94 35 01 	jmp	0x26a	; 0x26a <SPI_set_cs>
 1fa:	c1 e8       	ldi	r28, 0x81	; 129

}

void mcp2515_request_to_send(uint8_t buffer) {
    uint8_t address = (buffer == 0) ? 1 : buffer;
    SPI_unset_cs();
 1fc:	0e 94 33 01 	call	0x266	; 0x266 <SPI_unset_cs>
    SPI_send(RTS | address);
 200:	8c 2f       	mov	r24, r28
 202:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_set_cs();
}
 206:	cf 91       	pop	r28

void mcp2515_request_to_send(uint8_t buffer) {
    uint8_t address = (buffer == 0) ? 1 : buffer;
    SPI_unset_cs();
    SPI_send(RTS | address);
    SPI_set_cs();
 208:	0c 94 35 01 	jmp	0x26a	; 0x26a <SPI_set_cs>

0000020c <mcp2515_abort_send>:
}

void mcp2515_abort_send(uint8_t buffer) {
 20c:	cf 93       	push	r28
 20e:	c8 2f       	mov	r28, r24
    SPI_unset_cs();
 210:	0e 94 33 01 	call	0x266	; 0x266 <SPI_unset_cs>
    SPI_send(BIT_MODIFY);
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(buffer);
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(0x08);
 220:	88 e0       	ldi	r24, 0x08	; 8
 222:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_send(!0x08);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_send>
    SPI_set_cs();
}
 22c:	cf 91       	pop	r28
    SPI_unset_cs();
    SPI_send(BIT_MODIFY);
    SPI_send(buffer);
    SPI_send(0x08);
    SPI_send(!0x08);
    SPI_set_cs();
 22e:	0c 94 35 01 	jmp	0x26a	; 0x26a <SPI_set_cs>

00000232 <mcp2515_verify_register>:
}

uint8_t mcp2515_verify_register(uint8_t reg, uint8_t expected) {
 232:	cf 93       	push	r28
 234:	c6 2f       	mov	r28, r22
	uint8_t reading = mcp2515_read_register(reg);
 236:	0e 94 89 00 	call	0x112	; 0x112 <mcp2515_read_register>
	return (reading == expected);
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	8c 13       	cpse	r24, r28
 23e:	90 e0       	ldi	r25, 0x00	; 0
}
 240:	89 2f       	mov	r24, r25
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <SPI_init>:
#include <include/spi.h>

void SPI_init() {
	DDRB |= (1 << DDB2) | (1 << DDB3) | (1 << DDB4) | (1 << DDB5);
 246:	84 b1       	in	r24, 0x04	; 4
 248:	8c 63       	ori	r24, 0x3C	; 60
 24a:	84 b9       	out	0x04, r24	; 4
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 24c:	8c b5       	in	r24, 0x2c	; 44
 24e:	81 65       	ori	r24, 0x51	; 81
 250:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1 << PINB2);
 252:	2a 9a       	sbi	0x05, 2	; 5
 254:	08 95       	ret

00000256 <SPI_txrx>:
}

uint8_t SPI_txrx(uint8_t data) {
    PORTB &= ~(1 << PINB2);
 256:	2a 98       	cbi	0x05, 2	; 5
	SPDR = data;
 258:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF) ));
 25a:	0d b4       	in	r0, 0x2d	; 45
 25c:	07 fe       	sbrs	r0, 7
 25e:	fd cf       	rjmp	.-6      	; 0x25a <SPI_txrx+0x4>
    PORTB |= (1 << PINB2);
 260:	2a 9a       	sbi	0x05, 2	; 5
	return(SPDR);
 262:	8e b5       	in	r24, 0x2e	; 46
}
 264:	08 95       	ret

00000266 <SPI_unset_cs>:

void SPI_unset_cs() {
    PORTB &= ~(1 << PINB2);
 266:	2a 98       	cbi	0x05, 2	; 5
 268:	08 95       	ret

0000026a <SPI_set_cs>:
}

void SPI_set_cs(){
    PORTB |= (1 << PINB2);
 26a:	2a 9a       	sbi	0x05, 2	; 5
 26c:	08 95       	ret

0000026e <SPI_send>:
}

void SPI_send(uint8_t data) {
	SPDR = data;
 26e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF) ));
 270:	0d b4       	in	r0, 0x2d	; 45
 272:	07 fe       	sbrs	r0, 7
 274:	fd cf       	rjmp	.-6      	; 0x270 <SPI_send+0x2>
}
 276:	08 95       	ret

00000278 <main>:
#include <avr/io.h>

int main() {
 278:	ff cf       	rjmp	.-2      	; 0x278 <main>

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
